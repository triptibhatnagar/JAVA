.java file (Human readable) (SOURCE CODE) -- compiler(entire file) -->  .class file (BYTECODE) -- interpreter(line by line) --> MACHINE CODE (0 & 1)

        //PLATFORM INDEPENDENCE
        Bytecode can run on all operating system, this code does not run directly on a system , but need JVM.
        Therefore Java is platform independent.
        But JVM is platform dependent means for every Operating system, the executable file that we get, it has step by step set of instructions dependent on platform

        → Platform independence means that byte code can run on all operating system.
        → We need to convert source code to machine code so computer can understand it.
        → Compiler helps in doing this by turning it into executable code.
        → This executable code is a set of instruction s for the computer
        → After compiling C/C++ code we get.exe file which is platform dependent.
        → In java we get byte code, JVM converts this to machine code.
        → Java is platform independent but JVM is platform dependent

        //ARCHITECTURE OF JAVA
        JDK, JRE, JVM, JIT

        ### JDK :-
        Provide Environment to develop and run the java program.
        It is a package that includes :-
        1. Development tools :- To provide an environment to run your program.
        2. JRE:- To Execute your program.
        3. A compiler :- javac
        4. Archiver :- Jar
        5. Docs generator :- Javadoc
        6. Interpreter/loader

        ### JRE :-
        It is an installation package that provides environment to only run the program.
        It consist of:-
        1. Deployment technology
        2. User interface toolkit
        3. Integration libraries
        4. Base libraries
        5. JVM:- Java virtual Machine
        Compile Time: .java --> .class
        After we get the .class file, the next thing happens at runtime:
        - ClassLoader loads all the classes needed to execute the program.
        - JVM sends code to byte code verifier to check the format of code.
        Runtime:
        ClassLoader --> ByteCode Verifier --> Interpreter --> Runtime --> Hardware

        ### (How JVM Works) class Loader
        1)Loading
        → Read .class file and generate binary data.
        → an Object of this class is created in heap

        2)Linking
        JVM verifies the class file
        → allocates memory for class variables and default values
        → replace symbolic references from the type with direct reference.

        3)Initialization
        → All static variables are assigned with their values defined in the code and static bock.
        → JVM contains the stack and heap memory locations.

        ### JVM Execution
        Interpreter
        →Line by line execution
        → When one method is called many times it will interpret again and again
        → Those methods that are repeated, JIT provides direct machine code so that interpretation is not required.
        → Makes execution Faster.
        → Garbage collector.



        Terminal: echo $PATH	# This is where it looks for the applications that we want to open.

Class name always starts with a capital letter.

To understand code and see control flow, debug the code after putting breakpoint.
We can also change the values in debugger window to see what will happen at a particular value.

Input:
class Scanner to scan something i.e. Input something

command & click on class name to open class file. ex: cmd & click on 'Scanner'

javac -d . cmd.java
The -d switch specifies the destination where to put the generated class file.

OBJECT CLASS :
Object class is present in java.lang package.Every class in Java is directly or indirectly derived from the Object class.
If a Class does not extend any other class then it is direct child class of Object and if extends other class then it is
an indirectly derived. Therefore the Object class methods are available to all Java classes. Hence Object class acts as
a root of inheritance hierarchy in any Java Program.

There are methods in Object class:
toString(), hashCode(), equals(Object obj), getClass(), finalize(), clone(), etc.

NUMBER CLASS :
Most of the time, while working with numbers in java, we use primitive data types. But, Java also provides various
numeric wrapper sub classes under the abstract class Number present in java.lang package.There are mainly six subclasses
under Number class.These sub-classes define some useful methods which are used frequently while dealing with numbers.
Byte, Integer, Double, Short, Float, Long
NOTE : Primitive Wrapper Classes are Immutable in Java.